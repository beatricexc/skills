
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql" 
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    role          String    @default("user") // 

    hashedPassword String? // 

    accounts   Account[]
    sessions   Session[]
    userSkills UserSkill[] //  One-to-many relation
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    ext_expires_in Int? // <-- ADD THIS LINE

    user User @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Skill {
    id         String      @id @default(cuid())
    name       String
    categoryId String //  Foreign key field
    category   Category    @relation(fields: [categoryId], references: [id])
    userSkills UserSkill[] // optional relation

    @@unique([name, categoryId]) // Prevents duplicate techs in the same category
}

model Category {
    id     String  @id @default(cuid())
    name   String
    slug   String  @unique // Each slug must be unique (used in URLs)
    skills Skill[] //  One-to-many relationship
}

model UserSkill {
    id        String   @id @default(cuid())
    userId    String
    skillId   String
    level     Int
    updatedAt DateTime @default(now()) @updatedAt // automatically updates on change

    user  User  @relation(fields: [userId], references: [id])
    skill Skill @relation(fields: [skillId], references: [id])

    @@unique([userId, skillId]) // Prevent duplicates (e.g. user has same skill twice)
}
